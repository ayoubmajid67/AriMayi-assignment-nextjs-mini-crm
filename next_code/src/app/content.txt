Vous ne pr√©cisiez pas la techno dans votre message initial ‚Ä¶

üëè
üëç
üòä



Nous vous proposons ce challenge √† nous remettre via un lien vers le repo contenant l'exercice Front End ‚Äì Module CRM (NextJS). 

Attention, ne pas utiliser ChatGPT - le crit√®re sera √©valu√© 

Pensez √† cr√©er le readme


Objectif de l‚Äôexercice
Cr√©er l‚Äôinterface front-end d‚Äôun mini CRM en Next.js, incluant une gestion des clients, une navigation fonctionnelle et une interaction dynamique avec des donn√©es simul√©es.

Contexte
Vous travaillez sur un projet de CRM interne pour une petite √©quipe commerciale. Le but est de pouvoir :
 ‚Ä¢ Consulter une liste de clients,
 ‚Ä¢ Visualiser la fiche d√©taill√©e d‚Äôun client,
 ‚Ä¢ Ajouter un nouveau client via un formulaire.


Fonctionnalit√©s attendues (√† d√©velopper en front-end uniquement)
1. Page de connexion (Mock)
 ‚Ä¢ Affichage d‚Äôun √©cran de connexion (pas besoin de back, aucune validation).
 ‚Ä¢ Design propre et responsive.
2. Dashboard (apr√®s ‚Äúconnexion‚Äù)
 ‚Ä¢ Barre de navigation (ex : Dashboard, Clients, Ajouter un client).
 ‚Ä¢ Composant de layout structur√©.
3. Liste des clients
 ‚Ä¢ Affichage d‚Äôune table avec des clients mock√©s (JSON statique ou g√©n√©r√© avec Faker.js).
 ‚Ä¢ Colonnes : nom, email, t√©l√©phone, date de cr√©ation.
 ‚Ä¢ Possibilit√© de trier par nom.
 ‚Ä¢ Barre de recherche (filtre en front).
4. Fiche client
 ‚Ä¢ Accessible au clic sur une ligne de la table.
 ‚Ä¢ Affichage des informations d√©taill√©es du client.
 ‚Ä¢ Ajout d‚Äôun petit historique d‚Äôactivit√©s (mock√©).
5. Formulaire d‚Äôajout
 ‚Ä¢ Formulaire en React Hook Form ou contr√¥l√© √† la main.
 ‚Ä¢ Champs obligatoires : nom, pr√©nom, email, t√©l√©phone.
 ‚Ä¢ Validation simple (email valide, t√©l√©phone au bon format).
 ‚Ä¢ Affichage d‚Äôun message de succ√®s (pas besoin de persister les donn√©es).

Comp√©tences √©valu√©es
 ‚Ä¢ Ma√Ætrise de Next.js (pages ou App Router selon version),
 ‚Ä¢ Utilisation de composants r√©utilisables,
 ‚Ä¢ Structuration du projet,
 ‚Ä¢ Gestion du state (avec ou sans lib),
 ‚Ä¢ Sens du design et de l‚Äôergonomie,
 ‚Ä¢ Capacit√© √† rendre une interface dynamique et fluide.

Stack impos√©e / conseill√©e
 ‚Ä¢ Next.js
 ‚Ä¢ React (v18+)
 ‚Ä¢ Tailwind CSS ou autre framework de design (au choix)
 ‚Ä¢ TypeScript (bonus mais pas obligatoire)
 ‚Ä¢ React Hook Form ou gestion manuelle
 ‚Ä¢ Pas d‚Äôappel API r√©el (les donn√©es sont mock√©es)

Bonus si temps disponible
 ‚Ä¢ Ajout d‚Äôun syst√®me de ‚Äútags‚Äù par client
 ‚Ä¢ Pagination
 ‚Ä¢ Responsive mobile complet
 ‚Ä¢ Utilisation de Zustand ou Redux Toolkit pour la gestion de state
 ‚Ä¢ Tests (Jest, Testing Library)